{"version":3,"sources":["components/navbar.tsx","components/gst_list.tsx","components/create_counter.tsx","components/edit_counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GSTNavbar","Navbar","color","expand","NavbarBrand","role","aria-label","NavLink","href","Component","GSTListRow","counter","cb_add","cb_sub","cb_del","username","count","Button","onClick","_id","to","GSTList","state","counters","componentDidMount","console","log","axios","get","then","response","setState","data","catch","err","message","alert","deleteCounter","id","delete","res","filter","el","addCount","post","subCount","counterList","map","counter_","Table","this","CreateCounter","onChangeUsername","e","target","value","onSubmit","preventDefault","window","location","FormGroup","type","required","onChange","EditCounter","props","match","params","App","className","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9ca5f428.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    Navbar,\n    NavbarBrand,\n    NavLink\n} from \"reactstrap\";\n\nexport default class GSTNavbar extends Component<React.HTMLAttributes<HTMLDivElement>> {\n\n    render() {\n        return (\n            <div>\n                <Navbar\n                    color=\"light\"\n                    expand=\"md\"\n                >\n                    <NavbarBrand>\n                        <strong>\n                            GST<span role=\"img\" aria-label=\"shit\">💩</span>\n                        </strong>\n                    </NavbarBrand>\n                    <NavLink href=\"/\"> Counters </NavLink>\n                    <NavLink href=\"/create\"> New Geed </NavLink>\n                </Navbar>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport '../styles/gst_list.css'\n\nimport {\n    Table,\n    Button\n} from 'reactstrap';\n\n/* ************************* GSTListRow FC ************************* */\ninterface GST_LR_Props {\n    counter: any,\n    cb_add: Function,\n    cb_sub: Function,\n    cb_del: Function\n}\n\nexport const GSTListRow: React.FC<GST_LR_Props> = ({\n    counter,\n    cb_add,\n    cb_sub,\n    cb_del\n}) => (\n        <tr>\n            <td>{counter.username}</td>\n            <td>\n                <span>\n                    {counter.count}\n                    {' '}\n                    <Button\n                        color=\"primary\"\n                        onClick={() => cb_add(counter._id)}\n                    >\n                        +\n                    </Button>\n                    {' '}\n                    <Button\n                        color=\"danger\"\n                        onClick={() => cb_sub(counter._id)}\n                    >\n                        -\n                </Button>\n                </span>\n            </td>\n            <td>\n                <span>\n                    <Button\n                        color=\"link\"\n                        onClick={() => cb_del(counter._id)}\n                    >\n                        delete\n                    </Button>|\n                    <Button color=\"link\">\n                        <Link to={\"/edit/\" + counter._id}>\n                            edit\n                        </Link>\n                    </Button>\n                </span>\n            </td>\n        </tr>\n    );\n\n/* **************************** GSTList **************************** */\ninterface Props { /*none*/ }\ninterface State {\n    counters: Array<any>\n}\n\nexport default class GSTList extends Component<Props, State> {\n    state = {\n        counters: []\n    }\n\n    componentDidMount = () => {\n        \n        console.log(\"before show list\")\n        axios.get('http://54.218.71.105/counters/')\n            .then(response => {\n                this.setState({\n                    counters: response.data\n                });\n                console.log(\"show list\");\n            })\n            .catch(err => {\n                if (err.message === 'Network Error'){\n                    alert('Server probably isn\\'t on \\n' + err)\n                } else {\n                    alert(err);\n                }\n                console.log(err);\n            });\n    }\n\n    deleteCounter = (id: String) => {\n        axios.delete('http://54.218.71.105/counters/' + id)\n            .then(res => {\n                console.log(res.data);\n                this.setState({\n                    counters: this.state.counters.filter((el: any) => el._id !== id)\n                })\n            });\n    }\n\n    addCount = (id: String) => {\n        axios.post('http://54.218.71.105/counters/add/' + id)\n            .then(res => {\n                console.log(res.data);\n                // update our state\n                this.componentDidMount();\n            });\n\n    }\n\n    subCount = (id: String) => {\n        axios.post('http://54.218.71.105/counters/subtract/' + id)\n            .then(res => {\n                console.log(res.data);\n\n                console.log(\"test\");\n                // update our state\n                this.componentDidMount();\n            });\n    }\n\n    // for rendering our list of counters\n    counterList = () => {\n        return this.state.counters.map(counter_ => {\n            return (\n                <GSTListRow\n                    counter={counter_}\n                    cb_add={this.addCount}\n                    cb_sub={this.subCount}\n                    cb_del={this.deleteCounter}\n                />\n            );\n        });\n    }\n\n    render() {\n\n        return (\n            <div>\n                <h3>Current Offenders</h3>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Count</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.counterList()}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from \"axios\";\nimport {\n    FormGroup,\n    Button\n} from 'reactstrap'\n\ninterface State {\n    username: string\n}\n\nexport default class CreateCounter extends Component<State> {\n    state = {\n        username: \"\"\n    };\n\n    onChangeUsername = (e: any) => {\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    onSubmit = (e: any) => {\n        e.preventDefault();\n\n        const counter = {\n            username: this.state.username,\n            count: 0\n        }\n\n        console.log(counter);\n\n        axios.post('http://54.218.71.105/counters/add', counter)\n            .then(res => {\n                console.log(res.data);\n                //reset username\n                this.setState({\n                    username: \"\"\n                });\n                window.location.href = \"/\";\n            })\n            .catch(err => {\n                if (err.message === \"Network Error\"){\n                    alert('Server probably isn\\'t on \\n' + err);\n                } else{\n                    alert(err.response.data.message)\n                }\n                //reset username\n                this.setState({\n                    username: \"\"\n                });\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Create New Counter!</h3>\n                <form onSubmit={this.onSubmit}>\n                    <FormGroup>\n                        <label>Username: </label>\n                        {' '}\n                        <input\n                            type=\"text\"\n                            required\n                            value={this.state.username}\n                            onChange={this.onChangeUsername}\n                        />\n                    </FormGroup>\n                    <Button\n                        type=\"submit\"\n                    >\n                        geeed\n                    </Button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    FormGroup,\n    Button\n} from 'reactstrap'\n\n// we need to do this so we can access match.params.id from props\ninterface MatchParams { id: string }\ninterface Props extends RouteComponentProps<MatchParams> { /*none*/ }\n\ninterface State {\n    username: string\n}\n\nexport default class EditCounter extends Component<Props, State> {\n    state = {\n        username: \"\"\n    }\n\n    componentDidMount = () => {\n        axios.get('http://localhost:5000/counters/' + this.props.match.params.id)\n            .then(response => {\n                this.setState({\n                    username: response.data.username\n                })\n            })\n    }\n\n    onChangeUsername = (e: any) => {\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    onSubmit = (e: any) => {\n        e.preventDefault();\n\n        const counter = {\n            username: this.state.username,\n            count: 0\n        }\n\n        console.log(counter);\n\n        axios.post('http://localhost:5000/counters/update/' + this.props.match.params.id, counter)\n            .then(res => {\n                console.log(res.data);\n                //reset username\n                this.setState({\n                    username: \"\"\n                });\n                window.location.href = \"/\";\n            })\n            .catch(err => {\n                alert(err.response.data.message);\n                //reset username\n                this.setState({\n                    username: \"\"\n                });\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Edit Counter!</h3>\n                <form onSubmit={this.onSubmit}>\n                    <FormGroup>\n                        <label>Username: </label>\n                        {' '}\n                        <input\n                            type=\"text\"\n                            required\n                            value={this.state.username}\n                            onChange={this.onChangeUsername}\n                        />\n                    </FormGroup>\n                    <Button\n                        type=\"submit\"\n                    >\n                        Edit!\n                    </Button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\nimport GSTNavbar from \"./components/navbar\";\nimport GSTList from \"./components/gst_list\";\nimport CreateCounter from \"./components/create_counter\";\nimport EditCounter from \"./components/edit_counter\";\n\n// We implement the React.HTMLAttributes<HTMLDivElement> interface so we can give\n// our divs className properties\nexport default class App extends Component<React.HTMLAttributes<HTMLDivElement>> {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <GSTNavbar />\n          <br />\n          <div>\n            <strong>\n              View source code <a href=\"https://github.com/RYLiang18/the_gst\">here<span role=\"img\" aria-label=\"react\">⚛️</span></a>\n            </strong>\n          </div>\n          <br />\n          <Route path=\"/\" exact component={GSTList} />\n          <Route path=\"/create\" component={CreateCounter} />\n          <Route path=\"/edit/:id\" component={EditCounter} />\n        </div>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}